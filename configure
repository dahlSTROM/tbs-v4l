#!/bin/bash

# Be root to run this
if ! echo "$(whoami)" | grep "root" > /dev/null 2>&1; then
  echo -en "
\E[1;33;44m
You need root privs to run this

Aborting...
\E[0m

"
  exit 0
fi

die(){
    echo -en "
\E[1;33;44m$1, aborting...\E[0m

"
    exit 1
}

die_unknown(){
    echo -en "
\E[1;33;44mUnknown option \"$1\".\E[0m

"
    sleep 3
    ./configure --help
    exit 1
}

confirmyes(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [Y/n]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        [nN][oO]|[nN])
            false
            ;;
        *)
            true
            ;;
    esac
}

# Show failure message
dvbdev_patch(){
  echo -en "
\E[1;33;44m
dvbdev.c has been changed upstream. So it can not
be patched automatically. Please open a ticket at
https://github.com/bas-t/tbs-v4l and either hand me
the fix or ask me to fix it.

Aborting...
\E[0m

"
  exit 1
}

# Show failure message
makefile_patch(){
  echo -en "
\E[1;33;44m
The Makefile has been changed upstream. So it can not
be patched automatically. Please open a ticket at
https://github.com/bas-t/tbs-v4l and either hand me
the fix or ask me to fix it.

Aborting...
\E[0m

"
  exit 1
}

# Show failure message
download(){
  echo -en "
\E[1;33;44m
Faild to download v4l build system.

Aborting...
\E[0m

"
  exit 1
}

# Show failure message
prepare(){
  echo -en "
\E[1;33;44m
Faild to prepare the build system for compilation.

Aborting...
\E[0m

"
  exit 1
}

# Show faiure message
drivers(){
    echo -en " 
\E[1;33;44m
Failed to add TBS drivers to the build system

Aborting...
\E[0m

"
    exit 1
}

# Show help message
show_help(){
  echo "                        "
  echo " Usage: ./configure --opt1=<opt> --opt2=<opt>"
  echo "                        "
  echo " Options: [default], if any, in brackets after option."
  echo "                        "
  echo " --help                 Print this message"
  echo "                        "
  echo " --ffdecsabuild=<opt>   [yes] no: Don't build FFdecsawrapper"
  echo "                        "
  echo " --ffdecsaconf=<bool>   Use own FFdecsawrapper options"
  echo "                        Don't use this option unless you"
  echo "                        exactly know what you are doing."
  echo "                        "
  echo " --tbs=<opt>            [628] compile only 6281/6285 drivers."
  echo "                        6680: compile only 6680 drivers."
  echo "                        all: compile for both 6680 and 6281/6285." 
  echo "                        no: Don't use TBS drivers."
  echo "                        "
  echo " --dvbdev=<opt>         [yes] no: Don't patch dvbdev.c."
  echo "                        no also sets --ffdecsabuild=no"
  echo "                        "
  echo " --failsafe=<opt>       [yes] Use known working v4l tree"
  echo "                        from the first of june 2014"
  echo "                        no: use today's v4l tree"
  echo "                        "
  echo " --adapters=<opt>       [8] Set max number of adapters"
  echo "                        "
  echo " --gcc=<opt>            [auto] Automatically use the gcc version"
  echo "                        that best suits your running kernel"
  echo "                        or set it like --gcc=4.7"
  echo "                        "
  exit 0
}


# Set default options
ffdecsa_build="yes"
tbs_opt="628"
dvbdev_opt="yes"
failsafe_opt="yes"
adapters_opt="8"
gcc_opt="auto"

# Set options from command line
for opt do
  optval="${opt#*=}"
  case "$opt" in
  --ffdecsabuild=*) ffdecsa_build="$optval"
  ;;
  --ffdecsaconf=*) ffdecsa_conf="$optval"
  ;;
  --tbs=*) tbs_opt="$optval"
  ;;
  --dvbdev=*) ffdecsa_build="no"; dvbdev_opt="$optval"
  ;;
  --failsafe=*) failsafe_opt="$optval"
  ;;
  --adapters=*) adapters_opt="$optval"
  ;;
  --gcc=*) gcc_opt="$optval"
  ;;
  --help) show_help
  ;;
  *)
  die_unknown $opt
  ;;
  esac
done

confirmyes(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [Y/n]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        [nN][oO]|[nN])
            false
            ;;
        *)
            true
            ;;
    esac
}

# Check for incorrect use of options, except --ffdecsaconf (that's an "experts only" opt)
if test "x$ffdecsa_build" = "xno" || test "x$ffdecsa_build" = "xyes"; then
  if ! [ "$?" -eq 0 ]; then
    echo -en "
\E[1;33;44m
Bad option to --ffdecsabuild '$ffdecsa_build'.  Should be 'yes' or 'no'
\E[0m

"
    exit 1
  fi
fi

if test "x$tbs_opt" = "xno" || test "x$tbs_opt" = "xall" || test "x$tbs_opt" = "x628" || test "x$tbs_opt" = "x6680"; then
  if ! [ "$?" -eq 0 ]; then
    echo -en "
\E[1;33;44m
Bad option to --tbs '$tbs_opt'.  Should be 'all', 'no', '6680' or '628'
\E[0m

"
    exit 1
  fi
fi

if test "x$dvbdev_opt" = "xno" || test "x$dvbdev_opt" = "xyes"; then
  if ! [ "$?" -eq 0 ]; then
    echo -en "
\E[1;33;44m
Bad option to --dvbdev '$dvbdev_opt'.  Should be 'yes' or 'no'
\E[0m

"
    exit 1
  fi
fi

if test "x$failsafe_opt" = "xno" || test "x$failsafe_opt" = "xyes"; then
  if ! [ "$?" -eq 0 ]; then
    echo -en "
\E[1;33;44m
Bad option to --failsafe '$failsafe_opt'.  Should be 'yes' or 'no'
\E[0m

"
    exit 1
  fi
fi

if [ -f /usr/bin/lsb_release ]; then
  OS=$( lsb_release -si )
  RELEASE=$( lsb_release -sc )
fi

# Install build dependencies

if [ "$OS" = Debian -o "$OS" = Ubuntu ] ; then
  if ! dpkg-query -l build-essential | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency build-essential, marking for installation.
"
    apt-get install build-essential -y || die "Error installing dependency build-essential"
  fi
  if uname -a | egrep 'Debian|Ubuntu' > /dev/null  2>&1; then
    if ! dpkg-query -l linux-headers-`uname -r` | grep "ii" > /dev/null 2>&1; then
      echo "
Missing dependency linux-headers-`uname -r`, marking for installation.
"
      apt-get install linux-headers-`uname -r` -y  || die "Error installing dependency linux-headers-`uname -r`"
    fi
  fi
  if ! dpkg-query -l libproc-processtable-perl | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency libproc-processtable-perl, marking for installation.
"
    apt-get install libproc-processtable-perl -y || die "Error installing dependency libproc-processtable-perl"
  fi
  if ! dpkg-query -l patch | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency patch, marking for installation.
"
    apt-get install patch -y || die "Error installing dependency patch"
  fi
  if ! dpkg-query -l patchutils | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency patchutils, marking for installation.
"
    apt-get install patchutils -y || die "Error installing dependency patchutils"
  fi
fi


if [ "x$gcc_opt" = "xauto" ]; then
  # Check that the default gcc/g++ version matches the one the running kernel was built with

  CCSYSTEM=$( g++ -v 2>&1 | grep -i "gcc version" | awk '{ print $3 }' | cut -d'.' -f1,2 )
  CCKERNEL=$( cat /proc/version | awk '{ print $7 }' | cut -d'.' -f1,2 )
  OLDCC="$CCSYSTEM"

  export OLDCC

  if ! [ "$CCSYSTEM" = "$CCKERNEL" ] ; then
    if [ "$OS" = Debian -o "$OS" = Ubuntu ] ; then
      CCCHANGE="0"
      echo -en "
\E[1;33;44m
Your kernel is not compiled with your system's default
gcc/g++ version (gcc-$CCSYSTEM). It is advised to switch
to the version your kernel is built with (gcc-$CCKERNEL).
Do you want me to make that switch? If you want to,
I can revert the switch at the end of the build.
\E[0m

"
        confirmyes "Yes, please do![Y/n]"
      if [ "$?" -eq 0 ]; then
        CCCHANGE="1"
        if ! dpkg-query -l g++-$CCKERNEL | grep "ii" > /dev/null 2>&1; then
          echo "
Missing dependency g++-$CCKERNEL, marking for installation.
"
          apt-get install g++-$CCKERNEL -y || die "Error installing dependency g++-$CCKERNEL"
        fi
        ./gcc-version $CCKERNEL
      fi
    else
      echo -en "
\E[1;33;44m
Your kernel is not compiled with your system's default
gcc/g++ version (gcc-$CCSYSTEM). It is advised to switch to
the version your kernel is built with (gcc-$CCKERNEL).

Aborting...
\E[0m

"
      exit 0
    fi
  fi
else
  ./gcc-version $gcc_opt
fi

# Pull and prepare the v4l sources
cd .. && rm -rf media_build && git clone git://git.linuxtv.org/media_build.git
if ! [ "$?" -eq 0 ]; then
  download
fi  
cd tbs-v4l

# Use known working older v4l tree
if test "x$failsafe_opt" = "xyes"; then
  cd ../media_build && git checkout c3e8bd66491a0ea && git checkout -b failsafe && cd ../tbs-v4l
  sed -i 's/linux-media-LATEST/linux-media-2014-05-26-5ea8787/g' ../media_build/linux/Makefile
fi

# Comment out the unwanted commands
sed -i 's/system ("make allyesconfig")/#system ("make allyesconfig")/' ../media_build/build
sed -i 's/system ("make")/#system ("make")/' ../media_build/build
if test "x$failsafe_opt" = "xyes"; then
  sed -i 's/system("git pull/#system("git pull/' ../media_build/build
fi

# Prepare the build system (stage one)
cd ../media_build && ./build
if ! [ "$?" -eq 0 ]; then
  prepare
fi  
cd ../tbs-v4l

# Patch the build system (stage two)
echo -en "
\E[1;33;44m
Patching Makefile
\E[0m

"
sleep 1
cd ../media_build && patch -p1 < ../tbs-v4l/make-install.patch
if ! [ "$?" -eq 0 ]; then
  makefile_patch
fi
cd ../tbs-v4l

echo -en "
\E[1;33;44m
Patching dvbdev.c
\E[0m

"
sleep 1

if test "x$failsafe_opt" = "xyes"; then
  cd ../media_build && patch -p1 < ../tbs-v4l/ffdecsawrapper-failsafe.patch
else
  cd ../media_build && patch -p1 < ../tbs-v4l/ffdecsawrapper.patch
fi

if ! [ "$?" -eq 0 ]; then
  dvbdev_patch
fi
cd ../tbs-v4l

# Add TBS drivers to build system (stage three)
if test "x$tbs_opt" = "xall"; then
  echo -en "
\E[1;33;44m
Adding all supported TBS drivers to the build system
\E[0m

"
  sleep 2
  cd ../tbs-v4l
  ./add-tbs-drivers
  if ! [ "$?" -eq 0 ]; then
    drivers
  else
    echo -en "
\E[1;33;44m
Done, no errors reported
\E[0m

"
    sleep 2
  fi
elif test "x$tbs_opt" = "x628"; then
  echo -en "
\E[1;33;44m
Adding 6281/6285 TBS drivers to the build system
\E[0m

"
  sleep 2
  cd ../tbs-v4l
  ./add-tbs-drivers-6281-6285
  if ! [ "$?" -eq 0 ]; then
    drivers
  else
    echo -en "
\E[1;33;44m
Done, no errors reported
\E[0m

"
    sleep 2
  fi
elif test "x$tbs_opt" = "x6680"; then
  echo -en "
\E[1;33;44m
Adding 6680 TBS drivers to the build system
\E[0m

"
  sleep 2
  cd ../tbs-v4l
  ./add-tbs-drivers-6680
  if ! [ "$?" -eq 0 ]; then
    drivers
  else
    echo -en "
\E[1;33;44m
Done, no errors reported
\E[0m

"
    sleep 2
  fi
fi

# Configure v4l
echo -en "
\E[1;33;44m
Generating a new v4l drivers config
\E[0m

"
sleep 1
cd ../media_build && make allyesconfig
  if ! [ "$?" -eq 0 ]; then
    echo -en "
\E[1;33;44m
Failed to generate a new v4l drivers config

Aborting...
\E[0m

"
  cd ../tbs-v4l && exit 1
  fi
cd ../tbs-v4l

# Set DVB_MAX_ADAPTERS
if test "x$adapters_opt" != "x"; then
  sed -i "s/CONFIG_DVB_MAX_ADAPTERS=8/CONFIG_DVB_MAX_ADAPTERS=$adapters_opt/" ../media_build/v4l/.config
fi

# Compile v4l tree
echo -en "
\E[1;33;44m
Compiling v4l drivers.
Please be patient, this may take some time...
\E[0m

"
sleep 2
cd ../media_build && make -j 3
  if ! [ "$?" -eq 0 ]; then
    echo -en "
\E[1;33;44m
Failed to compile drivers.
Aborting...
\E[0m

"
    cd ../tbs-v4l && exit 1
  fi
cd ../tbs-v4l

# Install v4l drivers and firmware
echo -en "
\E[1;33;44m
Installing v4l drivers and firmware.
\E[0m

"

MEDIA="0"
if [ -d /lib/modules/`uname -r`/updates/media ]; then
  MEDIA="1"
  rm -rf /lib/modules/`uname -r`/updates/media
  depmod -a
fi

cd ../media_build && make install
  if [ "$MEDIA" -eq "1" ]; then
    echo -en "
\E[1;33;44m
You just replaced the existing updated DVB driver modules

and the existing /lib/modules/`uname -r`/updates/media dir.

That is not a problem, but you have to reboot when done!!!
\E[0m

"
    sleep 5
  fi

cd ../tbs-v4l

if [ "x$gcc_opt" = "xauto" ]; then
  if [ "$CCCHANGE" -eq "1" ]; then
      echo -en "
\E[1;33;44m
Do you want me to revert your system's default
gcc version to it's original state? (gcc-$OLDCC)
\E[0m

"
    confirmyes "Yes, revert it! [Y/n]"
    if [ "$?" -eq 0 ]; then
      ./gcc-version $OLDCC
    fi
  fi
fi

# Pull in FFdecsawrapper, configure and compile it
if test "x$ffdecsa_build" = "xyes"; then
  cd .. && rm -rf ffdecsawrapper && git clone https://github.com/bas-t/ffdecsawrapper.git && cd tbs-v4l
  if test "x$ffdecsawrapper_conf" != "x"; then
    cd ../ffdecsawrapper && ./configure $ffdecsawrapper_conf && cd ../tbs-v4l
  else
    cd ../ffdecsawrapper && ./configure --dvb_dir=../media_build/linux --v4l=yes && cd ../tbs-v4l
  fi
fi
echo -en "
\E[1;33;44m
All done. You should reboot your machine NOW!
\E[0m

"
confirmyes "Yes, reboot now! [Y/n]"

if [ "$?" -eq 0 ]; then
  /sbin/shutdown -r now
fi
